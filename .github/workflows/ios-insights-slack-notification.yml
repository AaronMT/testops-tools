name: Digest ios test results and import to BigQuery

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow'
        required: true
        default: 'main'

jobs:
  process-test-results:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configurae Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: moz-mobile-tools
      - name: Authenticate with Google Cloud
        run: |
          echo '${{ secrets.GCP_SA_IOS_TESTS_INSIGHTS }}' > gcloud-key.json
          gcloud auth activate-service-account --key-file=gcloud-key.json
          rm -f gcloud-key.json

      - name: List all the HTML files in the bucket
        id: list-html
        run: |
          echo "List HTML file on gs://mobile-reports/public/test_ios_insights/build/reports/"
          gsutil ls gs://mobile-reports/public/test_ios_insights/build/reports/*.html > html_files.txt
          cat html_files.txt
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: '3.13'
        
      - name: Install dependencies
        run: pip install -r ios-insights/requirements.txt

      - name: Convert HTML a NDJSON
        shell: bash
        run: |
          set -x  # Enables command logging for debugging
          mkdir -p processed
          while IFS= read -r file_html; do
            echo "Processing $file_html"
            gsutil cp "$file_html" .
            name_base=$(basename "$file_html" .html)

            echo "Checking if $name_base.html exists..."
            ls -lh
            if [ ! -f "$name_base.html" ]; then
                echo "ERROR: $name_base.html not found!"
                exit 1
            fi

            # Check if the Python script exists
            if [ ! -f "ios-insights/convertHTML2NDJSON.py" ]; then
                echo "ERROR: convertHTML2NDJSON.py not found!"
                ls -lh ios-insights
                exit 1
            fi

            echo "Running conversion script..."
            python ios-insights/convertHTML2NDJSON.py "$name_base.html" "$name_base.ndjson"

            if [ -s error_log.txt ]; then
                echo "Python script error output:"
                cat error_log.txt
            fi

            if [ -f "$name_base.ndjson" ]; then
                echo "NDJSON successfully created: $name_base.ndjson"
                mv "$name_base.ndjson" processed/
            else
                echo "ERROR: NDJSON file not generated!"
                exit 1
            fi
          done < html_files.txt
            
      - name: Upload generated NDJSON to the bucket
        run: |
          for ndjson_file in processed/*.ndjson; do
            echo "Uplod $ndjson_file to bucket..."
            gsutil cp "$ndjson_file" gs://mobile-reports/public/test_ios_insights/build/reports/
          done

      - name: Import NDJSON to BigQuery
        run: |
          for file in processed/*.ndjson; do
            echo "Importing $file into BigQuery..."
            bq --location=US load \
               --source_format=NEWLINE_DELIMITED_JSON \
               --time_partitioning_field=timestamp \
               --clustering_fields=test_suite,test_case \
               ${{ secrets.GCP_SA_IOS_TESTS_INSIGHTS_TABLE }} \
               "$file" \
               ios-insights/schema.json
          done
        
      - name: Clear bucket
        if: ${{ success() }}
        run: |
           echo "Delete HTML and JSON files from the bucket..."
           gsutil rm gs://mobile-reports/public/test_ios_insights/build/reports/*.html
           gsutil rm gs://mobile-reports/public/test_ios_insights/build/reports/*.ndjson

      - name: Get Daily Test Stats from BigQuery
        run: |
           bq query --use_legacy_sql=false --format=json \
           "WITH test_data AS (
             SELECT 
               COUNT(*) AS total_tests,
               COUNTIF(result = 'failed') AS failed_tests,
               COUNTIF(result = 'flaky') AS flaky_tests
             FROM \`${{ secrets.GCP_SA_IOS_TESTS_INSIGHTS_TABLE }}\`
             WHERE DATE(timestamp) = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
           )
           SELECT 
             total_tests,
             failed_tests,
             flaky_tests,
             ROUND((failed_tests / total_tests) * 100, 2) AS failure_rate,
             ROUND((flaky_tests / total_tests) * 100, 2) AS flaky_rate
           FROM test_data;" > test_report.json
         
           cat test_report.json

      - name: Send Slack Notification
        run: |
           TOTAL_TESTS=$(jq -r '.[0].total_tests' test_report.json)
           FAILED_TESTS=$(jq -r '.[0].failed_tests' test_report.json)
           FLAKY_TESTS=$(jq -r '.[0].flaky_tests' test_report.json)
           FAILURE_RATE=$(jq -r '.[0].failure_rate' test_report.json)
           FLAKY_RATE=$(jq -r '.[0].flaky_rate' test_report.json)
           YESTERDAY=$(date -d "yesterday" '+%Y-%m-%d')
         
           SLACK_MESSAGE='{
             "text": "*Firefox iOS UI Test Daily Digest - Fennec*",
             "blocks": [
                 { "type": "section", "text": { "type": "mrkdwn", "text": "*Firefox iOS UI Test Daily Digest - Fennec*" } },
                 { "type": "section", "text": { "type": "mrkdwn", "text": "Fennec UI Test Daily Digest for '"$YESTERDAY"'" } },
                 { "type": "section", "fields": [
                   { "type": "mrkdwn", "text": "*Tests Ran Yesterday:* '"$TOTAL_TESTS"'" },
                   { "type": "mrkdwn", "text": "*Flaky Tests Yesterday:* '"$FLAKY_TESTS"' - WIP" },
                   { "type": "mrkdwn", "text": "*Flaky Rate Yesterday:* '"$FLAKY_RATE"'% - WIP" },
                   { "type": "mrkdwn", "text": "*Failed Tests Yesterday:* '"$FAILED_TESTS"'" },
                   { "type": "mrkdwn", "text": "*Failure Rate Yesterday:* '"$FAILURE_RATE"'%" }
                 ]}
             ]
           }'
         
           curl -X POST -H 'Content-type: application/json' --data "$SLACK_MESSAGE" ${{ secrets.SLACK_WEBHOOK_URL_TEST_ALERTS_SANDBOX }}
         